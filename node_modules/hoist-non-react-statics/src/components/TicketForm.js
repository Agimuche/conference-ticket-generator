import React, { useState, useEffect } from "react";
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as Yup from "yup";
import localforage from "localforage";

const TicketForm = ({ onSubmit }) => {
  const [savedData, setSavedData] = useState({ fullName: "", email: "", avatar: "" });

  useEffect(() => {
    // Load saved data from IndexedDB
    localforage.getItem("formData").then((data) => {
      if (data) setSavedData(data);
    });
  }, []);

  // Validation schema
  const validationSchema = Yup.object({
    fullName: Yup.string().required("Full Name is required"),
    email: Yup.string().email("Invalid email format").required("Email is required"),
    avatar: Yup.string().url("Invalid URL").required("Avatar URL is required"),
  });

  return (
    <Formik
      initialValues={savedData}
      validationSchema={validationSchema}
      enableReinitialize
      onSubmit={(values, { setSubmitting }) => {
        localforage.setItem("formData", values); // Save to IndexedDB
        onSubmit(values);
        setSubmitting(false);
      }}
    >
      {({ isSubmitting }) => (
        <Form className="form-container">
          <div>
            <label htmlFor="fullName">Full Name:</label>
            <Field type="text" name="fullName" />
            <ErrorMessage name="fullName" component="div" className="error" />
          </div>

          <div>
            <label htmlFor="email">Email Address:</label>
            <Field type="email" name="email" />
            <ErrorMessage name="email" component="div" className="error" />
          </div>

          <div>
            <label htmlFor="avatar">Avatar URL:</label>
            <Field type="text" name="avatar" placeholder="Upload image and paste URL" />
            <ErrorMessage name="avatar" component="div" className="error" />
          </div>

          <button type="submit" disabled={isSubmitting}>Generate Ticket</button>
        </Form>
      )}
    </Formik>
  );
};

export default TicketForm;
